//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Value : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal Value(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Value obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Value() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          CSEvalPINVOKE.delete_Value(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static Value Create(SWIGTYPE_p_NDShape sampleShape, FloatVector sequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CSEvalPINVOKE.Value_Create__SWIG_0(SWIGTYPE_p_NDShape.getCPtr(sampleShape), FloatVector.getCPtr(sequences), (int)device, readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Value Create(SWIGTYPE_p_NDShape sampleShape, FloatVector sequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CSEvalPINVOKE.Value_Create__SWIG_1(SWIGTYPE_p_NDShape.getCPtr(sampleShape), FloatVector.getCPtr(sequences), (int)device);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Value Create(SWIGTYPE_p_NDShape sampleShape, FloatVectorVector sequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CSEvalPINVOKE.Value_Create__SWIG_2(SWIGTYPE_p_NDShape.getCPtr(sampleShape), FloatVectorVector.getCPtr(sequences), (int)device, readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Value Create(SWIGTYPE_p_NDShape sampleShape, FloatVectorVector sequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CSEvalPINVOKE.Value_Create__SWIG_3(SWIGTYPE_p_NDShape.getCPtr(sampleShape), FloatVectorVector.getCPtr(sequences), (int)device);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Value Create(uint vocabularySize, SizeTVector oneHotSequences, DeviceDescriptor device, bool readOnly) {
    global::System.IntPtr cPtr = CSEvalPINVOKE.Value_Create__SWIG_4(vocabularySize, SizeTVector.getCPtr(oneHotSequences), (int)device, readOnly);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Value Create(uint vocabularySize, SizeTVector oneHotSequences, DeviceDescriptor device) {
    global::System.IntPtr cPtr = CSEvalPINVOKE.Value_Create__SWIG_5(vocabularySize, SizeTVector.getCPtr(oneHotSequences), (int)device);
    Value ret = (cPtr == global::System.IntPtr.Zero) ? null : new Value(cPtr, true);
    if (CSEvalPINVOKE.SWIGPendingException.Pending) throw CSEvalPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Value() : this(CSEvalPINVOKE.new_Value(), true) {
  }

}
