# Calculate root directory in case we need absolute paths.
ROOT_DIR := $(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))

# Include makefile config
CONFIG_FILE := Makefile.config
ifeq ($(wildcard $(CONFIG_FILE)),)
$(error $(CONFIG_FILE) not found.)
endif
include $(CONFIG_FILE)

# Assume release unless overriden with command line
DEBUG ?= 0

#############################
# SHARED DIRECTORY NAMES
#############################

BUILD_ROOT_DIR := ../build

# Configuration based build destination
ifeq ($(DEBUG), 1)
	BUILD_DIR := $(BUILD_ROOT_DIR)/debug
else
	BUILD_DIR := $(BUILD_ROOT_DIR)/release
endif

# projects in common directory
COMMON_DIR_NAME := common
COMMON_BUILD_DIR := $(BUILD_DIR)/$(COMMON_DIR_NAME)

# projects in dataset directory
DATASET_DIR_NAME := dataset
DATASET_BUILD_DIR := $(BUILD_DIR)/$(DATASET_DIR_NAME)

#############################
# PLATFORM PROJECT
#############################

COMMON_PLATFORM := platform

COMMON_PLATFORM_BUILD_DIR := $(COMMON_BUILD_DIR)/$(COMMON_PLATFORM)

COMMON_PLATFORM_SRC_DIR := $(COMMON_DIR_NAME)/$(COMMON_PLATFORM)
COMMON_PLATFORM_SRCS := $(wildcard $(COMMON_PLATFORM_SRC_DIR)/*.cpp)
COMMON_PLATFORM_OBJS := $(addprefix $(BUILD_DIR)/, ${COMMON_PLATFORM_SRCS:.cpp=.o})

COMMON_PLATFORM_LIB_NAME := lib$(COMMON_PLATFORM).a
COMMON_PLATFORM_LIB := $(COMMON_PLATFORM_BUILD_DIR)/$(COMMON_PLATFORM_LIB_NAME)

$(COMMON_PLATFORM_BUILD_DIR)/%.o: $(COMMON_PLATFORM_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) -c -o  $@
	@$(CXX) $< $(CXXFLAGS) -c -o  $@

$(COMMON_PLATFORM_LIB): $(COMMON_PLATFORM_OBJS)
	@echo AR rcs $@ $^
	@$(AR) rcs $@ $^


#############################
# COMMON STANDALONE PROJECT
#############################

COMMON_COMMON_STANDALONE := common_standalone

COMMON_COMMON_STANDALONE_BUILD_DIR := $(COMMON_BUILD_DIR)/$(COMMON_COMMON_STANDALONE)

COMMON_COMMON_STANDALONE_SRC_DIR := $(COMMON_DIR_NAME)/$(COMMON_COMMON_STANDALONE)
COMMON_COMMON_STANDALONE_SRCS := $(wildcard $(COMMON_COMMON_STANDALONE_SRC_DIR)/*.cpp)
COMMON_COMMON_STANDALONE_OBJS := $(addprefix $(BUILD_DIR)/, ${COMMON_COMMON_STANDALONE_SRCS:.cpp=.o})

COMMON_COMMON_STANDALONE_LIB_NAME := lib$(COMMON_COMMON_STANDALONE).a
COMMON_COMMON_STANDALONE_LIB := $(COMMON_COMMON_STANDALONE_BUILD_DIR)/$(COMMON_COMMON_STANDALONE_LIB_NAME)

COMMON_COMMON_STANDALONE_LIB_INCLUDES := $(COMMON_PLATFORM_SRC_DIR)
COMMON_COMMON_STANDALONE_LIB_INCLUDES_FINAL := $(foreach includedir,$(COMMON_COMMON_STANDALONE_LIB_INCLUDES), -I$(includedir))

$(COMMON_COMMON_STANDALONE_BUILD_DIR)/%.o: $(COMMON_COMMON_STANDALONE_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) $(COMMON_COMMON_STANDALONE_LIB_INCLUDES_FINAL) -c -o  $@
	@$(CXX) $< $(CXXFLAGS) $(COMMON_COMMON_STANDALONE_LIB_INCLUDES_FINAL) -c -o  $@

$(COMMON_COMMON_STANDALONE_LIB): $(COMMON_COMMON_STANDALONE_OBJS)
	@echo AR rcs $@ $^
	@$(AR) rcs $@ $^

#############################
# COMMON CMD LINE PARSER PROJECT
#############################

COMMON_CMD_LINE_PARSER := cmd_line_parser

COMMON_CMD_LINE_PARSER_BUILD_DIR := $(COMMON_BUILD_DIR)/$(COMMON_CMD_LINE_PARSER)

COMMON_CMD_LINE_PARSER_SRC_DIR := $(COMMON_DIR_NAME)/$(COMMON_CMD_LINE_PARSER)
COMMON_CMD_LINE_PARSER_SRCS := $(wildcard $(COMMON_CMD_LINE_PARSER_SRC_DIR)/*.cpp)
COMMON_CMD_LINE_PARSER_OBJS := $(addprefix $(BUILD_DIR)/, ${COMMON_CMD_LINE_PARSER_SRCS:.cpp=.o})

COMMON_CMD_LINE_PARSER_LIB_NAME := lib$(COMMON_CMD_LINE_PARSER).a
COMMON_CMD_LINE_PARSER_LIB := $(COMMON_CMD_LINE_PARSER_BUILD_DIR)/$(COMMON_CMD_LINE_PARSER_LIB_NAME)

COMMON_CMD_LINE_PARSER_INCLUDES := $(COMMON_COMMON_STANDALONE_SRC_DIR)
COMMON_CMD_LINE_PARSER_INCLUDES_FINAL := $(foreach includedir,$(COMMON_CMD_LINE_PARSER_INCLUDES), -I$(includedir))

$(COMMON_CMD_LINE_PARSER_BUILD_DIR)/%.o: $(COMMON_CMD_LINE_PARSER_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) $(COMMON_CMD_LINE_PARSER_INCLUDES_FINAL) -c -o  $@
	@$(CXX) $< $(CXXFLAGS) $(COMMON_CMD_LINE_PARSER_INCLUDES_FINAL) -c -o  $@

$(COMMON_CMD_LINE_PARSER_LIB): $(COMMON_CMD_LINE_PARSER_OBJS)
	@echo AR rcs $@ $^
	@$(AR) rcs $@ $^

#############################
# COMMON PROTOBUF WRAPPER PROJECT
#############################

COMMON_PROTOBUF_WRAPPER := protobuf_wrapper

COMMON_PROTOBUF_WRAPPER_BUILD_DIR := $(COMMON_BUILD_DIR)/$(COMMON_PROTOBUF_WRAPPER)

COMMON_PROTOBUF_WRAPPER_SRC_DIR := $(COMMON_DIR_NAME)/$(COMMON_PROTOBUF_WRAPPER)
COMMON_PROTOBUF_WRAPPER_SRCS := $(wildcard $(COMMON_PROTOBUF_WRAPPER_SRC_DIR)/*.cpp)
COMMON_PROTOBUF_WRAPPER_OBJS := $(addprefix $(BUILD_DIR)/, ${COMMON_PROTOBUF_WRAPPER_SRCS:.cpp=.o})

COMMON_PROTOBUF_WRAPPER_LIB_NAME := lib$(COMMON_PROTOBUF_WRAPPER).a
COMMON_PROTOBUF_WRAPPER_LIB := $(COMMON_PROTOBUF_WRAPPER_BUILD_DIR)/$(COMMON_PROTOBUF_WRAPPER_LIB_NAME)

COMMON_PROTOBUF_WRAPPER_INCLUDES := $(COMMON_COMMON_STANDALONE_SRC_DIR)
COMMON_PROTOBUF_WRAPPER_INCLUDES_FINAL := $(foreach includedir,$(COMMON_PROTOBUF_WRAPPER_INCLUDES), -I$(includedir))

$(COMMON_PROTOBUF_WRAPPER_BUILD_DIR)/%.o: $(COMMON_PROTOBUF_WRAPPER_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) $(COMMON_PROTOBUF_WRAPPER_INCLUDES_FINAL) -c -o  $@
	$(CXX) $< $(CXXFLAGS) $(COMMON_PROTOBUF_WRAPPER_INCLUDES_FINAL) -c -o  $@

$(COMMON_PROTOBUF_WRAPPER_LIB): $(COMMON_PROTOBUF_WRAPPER_OBJS)
	@echo AR rcs $@ $^
	@$(AR) rcs $@ $^

#############################
# DATASET LIBRARY PROJECT
#############################

DATASET_LIB_NAME := dataset_lib
DATASET_LIB_BUILD_DIR := $(DATASET_BUILD_DIR)/$(DATASET_LIB_NAME)

DATASET_LIB_SRC_DIR := $(DATASET_DIR_NAME)/$(DATASET_LIB_NAME)

DATASET_LIB_PROTO_SRCS := $(wildcard $(DATASET_LIB_SRC_DIR)/proto/*.proto)
DATASET_LIB_PROTO_CXX := ${DATASET_LIB_PROTO_SRCS:.proto=.pb.cc}
DATASET_LIB_CXX_SRCS := $(shell find $(DATASET_LIB_SRC_DIR) -name "*.cpp")

DATASET_LIB_CXX_OBJS := $(addprefix $(BUILD_DIR)/, ${DATASET_LIB_CXX_SRCS:.cpp=.o})
DATASET_LIB_PROTO_OBJS := $(addprefix $(BUILD_DIR)/, ${DATASET_LIB_PROTO_CXX:.cc=.o})
DATASET_LIB_OBJS := $(DATASET_LIB_PROTO_OBJS) $(DATASET_LIB_CXX_OBJS)

DATASET_LIB_LIB_NAME := lib$(DATASET_LIB_NAME).a
DATASET_LIB_LIB := $(DATASET_LIB_BUILD_DIR)/$(DATASET_LIB_LIB_NAME)

# If we are provided with custom protbuf path ensure we use correct proto compiler and cc includes.
ifdef DNNTOOLS_PROTOBUF_PATH
PROTO_COMPILER = $(DNNTOOLS_PROTOBUF_PATH)/bin/protoc
PROTO_CC_INCLUDES = -I$(DNNTOOLS_PROTOBUF_PATH)/include
else
# Just use system installation
PROTO_COMPILER = protoc
PROTO_CC_INCLUDES = 
endif

$(DATASET_LIB_SRC_DIR)/proto/%.pb.cc: $(DATASET_LIB_SRC_DIR)/proto/%.proto
	@echo @$(PROTO_COMPILER) --proto_path=$(DATASET_LIB_SRC_DIR)/proto --cpp_out=$(DATASET_LIB_SRC_DIR)/proto $<
	@$(PROTO_COMPILER) --proto_path=$(DATASET_LIB_SRC_DIR)/proto --cpp_out=$(DATASET_LIB_SRC_DIR)/proto $<

DATASET_LIB_INCLUDES := $(COMMON_COMMON_STANDALONE_SRC_DIR) $(DATASET_LIB_SRC_DIR)/proto $(COMMON_PLATFORM_SRC_DIR) $(COMMON_PROTOBUF_WRAPPER_SRC_DIR)
ifdef DNNTOOLS_OPENCV_PATH
# External caller may force certain version of openCV. Use this version if DNNTOOLS_OPENCV_PATH is provided.
DATASET_LIB_INCLUDES += $(DNNTOOLS_OPENCV_PATH)/include
endif
ifdef DNNTOOLS_PROTOBUF_PATH
# External caller may force certain version of protobuf. Use this version if DNNTOOLS_PROTOBUF_PATH is provided.
DATASET_LIB_INCLUDES += $(DNNTOOLS_PROTOBUF_PATH)/include
endif
DATASET_LIB_INCLUDES_FINAL := $(foreach includedir,$(DATASET_LIB_INCLUDES), -I$(includedir))

$(DATASET_LIB_BUILD_DIR)/proto/%.pb.o: $(DATASET_LIB_SRC_DIR)/proto/%.pb.cc
	@echo $(CXX) $< $(CXXFLAGS) $(PROTO_CC_INCLUDES) -c -o  $@
	@$(CXX) $< $(CXXFLAGS) $(PROTO_CC_INCLUDES) -c -o  $@

$(DATASET_LIB_BUILD_DIR)/%.o: $(DATASET_LIB_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) $(DATASET_LIB_INCLUDES_FINAL) -c -o  $@
	@$(CXX) $< $(CXXFLAGS) $(DATASET_LIB_INCLUDES_FINAL) -c -o  $@

$(DATASET_LIB_LIB): $(DATASET_LIB_OBJS)
	@echo AR rcs $@ $^
	@$(AR) rcs $@ $^

#############################
# DATASET TOOL PROJECT
#############################

DATASET_TOOL_NAME := dataset_tool
DATASET_TOOL_BUILD_DIR := $(DATASET_BUILD_DIR)/$(DATASET_TOOL_NAME)

DATASET_TOOL_SRC_DIR := $(DATASET_DIR_NAME)/$(DATASET_TOOL_NAME)
DATASET_TOOL_CXX_SRCS := $(shell find $(DATASET_TOOL_SRC_DIR) -name "*.cpp")
DATASET_TOOL_CXX_OBJS := $(addprefix $(BUILD_DIR)/, ${DATASET_TOOL_CXX_SRCS:.cpp=.o})

DATASET_TOOL_TOOL_NAME := $(DATASET_TOOL_NAME)
DATASET_TOOL_TOOL := $(DATASET_TOOL_BUILD_DIR)/$(DATASET_TOOL_TOOL_NAME)

DATASET_TOOL_INCLUDES := $(COMMON_COMMON_STANDALONE_SRC_DIR) $(COMMON_CMD_LINE_PARSER_SRC_DIR) $(DATASET_LIB_SRC_DIR)
DATASET_TOOL_INCLUDES_FINAL := $(foreach includedir,$(DATASET_TOOL_INCLUDES), -I$(includedir))

DATASET_TOOL_LIBRARY_DIRS = $(COMMON_PLATFORM_BUILD_DIR) $(COMMON_COMMON_STANDALONE_BUILD_DIR) $(DATASET_LIB_BUILD_DIR) $(COMMON_CMD_LINE_PARSER_BUILD_DIR) $(COMMON_PROTOBUF_WRAPPER_BUILD_DIR)
DATASET_TOOL_LIBRARY_DIRS_FINAL := $(foreach library_dir,$(DATASET_TOOL_LIBRARY_DIRS), -L$(library_dir))

DATASET_TOOL_LIBRARIES = $(DATASET_LIB_NAME) $(COMMON_CMD_LINE_PARSER) $(COMMON_PROTOBUF_WRAPPER) $(COMMON_PLATFORM) $(COMMON_COMMON_STANDALONE) opencv_core opencv_highgui opencv_imgproc protobuf boost_program_options
DATASET_TOOL_LIBRARIES_FINAL := $(foreach library,$(DATASET_TOOL_LIBRARIES), -l$(library))

$(DATASET_TOOL_BUILD_DIR)/%.o: $(DATASET_TOOL_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) $(DATASET_TOOL_INCLUDES_FINAL) -c -o  $@
	$(CXX) $< $(CXXFLAGS) $(DATASET_TOOL_INCLUDES_FINAL) -c -o  $@

$(DATASET_TOOL_TOOL): $(DATASET_TOOL_CXX_OBJS)
	@echo $(CXX) $^ -o $@ $(DATASET_TOOL_LIBRARY_DIRS_FINAL) $(DATASET_TOOL_LIBRARIES_FINAL)
	@$(CXX) $^ -o $@ $(DATASET_TOOL_LIBRARY_DIRS_FINAL) $(DATASET_TOOL_LIBRARIES_FINAL)

#############################
# CAFFE DYN LIB PROJECT
#############################

DATASET_CAFFE_SO_NAME := caffe_dyn_lib
DATASET_CAFFE_SO_BUILD_DIR := $(DATASET_BUILD_DIR)/$(DATASET_CAFFE_SO_NAME)

DATASET_CAFFE_SO_SRC_DIR := $(DATASET_DIR_NAME)/$(DATASET_CAFFE_SO_NAME)
DATASET_CAFFE_SO_CXX_SRCS := $(shell find $(DATASET_CAFFE_SO_SRC_DIR) -name "*.cpp")
DATASET_CAFFE_SO_CXX_OBJS := $(addprefix $(BUILD_DIR)/, ${DATASET_CAFFE_SO_CXX_SRCS:.cpp=.o})

DATASET_CAFFE_SO_SO_NAME := lib$(DATASET_CAFFE_SO_NAME).so
DATASET_CAFFE_SO_SO := $(DATASET_CAFFE_SO_BUILD_DIR)/$(DATASET_CAFFE_SO_SO_NAME)

DATASET_CAFFE_SO_INCLUDES := $(CAFFE_INTERFACE_DIR) $(DATASET_LIB_SRC_DIR) $(COMMON_COMMON_STANDALONE_SRC_DIR)
DATASET_CAFFE_SO_INCLUDES_FINAL := $(foreach includedir,$(DATASET_CAFFE_SO_INCLUDES), -I$(includedir))

DATASET_CAFFE_SO_LIBRARY_DIRS = $(COMMON_PLATFORM_BUILD_DIR) $(COMMON_COMMON_STANDALONE_BUILD_DIR) $(DATASET_LIB_BUILD_DIR) $(COMMON_PROTOBUF_WRAPPER_BUILD_DIR)
DATASET_CAFFE_SO_LIBRARY_DIRS_FINAL := $(foreach library_dir,$(DATASET_CAFFE_SO_LIBRARY_DIRS), -L$(library_dir))

DATASET_CAFFE_SO_LIBRARIES = $(DATASET_LIB_NAME) $(COMMON_PROTOBUF_WRAPPER) $(COMMON_PLATFORM) $(COMMON_COMMON_STANDALONE) opencv_core opencv_highgui opencv_imgproc protobuf
DATASET_CAFFE_SO_LIBRARIES_FINAL := $(foreach library,$(DATASET_CAFFE_SO_LIBRARIES), -l$(library))

$(DATASET_CAFFE_SO_BUILD_DIR)/%.o: $(DATASET_CAFFE_SO_SRC_DIR)/%.cpp
	@echo $(CXX) $< $(CXXFLAGS) $(DATASET_CAFFE_SO_INCLUDES_FINAL) -c -o  $@
	$(CXX) $< $(CXXFLAGS) $(DATASET_CAFFE_SO_INCLUDES_FINAL) -c -o  $@

$(DATASET_CAFFE_SO_SO): $(DATASET_CAFFE_SO_CXX_OBJS)
	@echo $(CXX) -shared $^ -o $@  $(DATASET_CAFFE_SO_LIBRARY_DIRS_FINAL) $(DATASET_CAFFE_SO_LIBRARIES_FINAL)
	@$(CXX) -shared $^ -o $@  $(DATASET_CAFFE_SO_LIBRARY_DIRS_FINAL) $(DATASET_CAFFE_SO_LIBRARIES_FINAL)

#############################
# BUILD OUTPUT DIRECTORIES
#############################

DATASET_BUILD_DIRS := $(DATASET_BUILD_DIR) $(DATASET_LIB_BUILD_DIR) $(DATASET_LIB_BUILD_DIR)/proto $(DATASET_TOOL_BUILD_DIR) $(DATASET_CAFFE_SO_BUILD_DIR)

COMMON_BUILD_DIRS := $(COMMON_BUILD_DIR) $(COMMON_PLATFORM_BUILD_DIR) $(COMMON_CMD_LINE_PARSER_BUILD_DIR) $(COMMON_COMMON_STANDALONE_BUILD_DIR) $(COMMON_PROTOBUF_WRAPPER_BUILD_DIR)

ALL_BUILD_DIRS := $(BUILD_ROOT_DIR) $(BUILD_DIR) $(DATASET_BUILD_DIRS) $(COMMON_BUILD_DIRS)

#############################
# COMPILER OPTIONS
#############################

ifeq ($(DEBUG), 1)
	CXXFLAGS := -g -O0 -DDEBUG -m64
else
	CXXFLAGS := -O3 -DNDEBUG -m64
endif

CXXFLAGS += -std=c++11 -pthread -fPIC -w

#############################
# TARGETS
#############################

.SECONDARY: $(DATASET_LIB_PROTO_CXX)

$(ALL_BUILD_DIRS):
	@echo mkdir $@ -p
	@mkdir $@ -p

common_platform_target: $(ALL_BUILD_DIRS) $(COMMON_PLATFORM_LIB)

common_common_standalone_target: $(ALL_BUILD_DIRS) $(COMMON_COMMON_STANDALONE_LIB)

common_protobuf_wrapper_target : $(ALL_BUILD_DIRS) $(COMMON_PROTOBUF_WRAPPER_LIB)

common_cmd_line_parser_target: $(ALL_BUILD_DIRS) $(COMMON_CMD_LINE_PARSER_LIB)

ds_caffe_so: $(ALL_BUILD_DIRS) $(DATASET_CAFFE_SO_SO)

ds_lib_target: $(ALL_BUILD_DIRS) $(DATASET_LIB_LIB)

ds_tool: $(ALL_BUILD_DIRS) $(DATASET_TOOL_TOOL)

common_target:  common_platform_target common_common_standalone_target common_cmd_line_parser_target common_protobuf_wrapper_target

dataset_target: ds_lib_target ds_tool ds_caffe_so

all: common_target dataset_target
	@echo Build all successful.

clean:
	@echo Cleaning all.
	@rm -rf $(BUILD_ROOT_DIR)
	@rm -f $(DATASET_LIB_SRC_DIR)/proto/*.pb.cc
	@rm -f $(DATASET_LIB_SRC_DIR)/proto/*.pb.h

