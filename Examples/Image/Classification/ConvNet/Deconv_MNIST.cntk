# ConvNet on MNIST dataset. 

command = trainNetwork:testNetwork

precision = "float"; traceLevel = 1 ; deviceId = "auto"

rootDir = "../.." ; dataDir = "$rootDir$/DataSets/MNIST" ;
outputDir = "./Output" ;

modelPath = "$outputDir$/Models/ConvNet_MNIST"
#stderr = "$outputDir$/ConvNet_MNIST_bs_out"

# TRAINING CONFIG
trainNetwork = {
    action = "train"

    BrainScriptNetworkBuilder = {
        imageShape = 28:28:1                        # image dimensions, 1 channel only
        labelDim = 10                               # number of distinct labels
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        
        model = xScaled => {
            c1      = ConvolutionalLayer {16, (5:5), pad = true}(xScaled)
            r1      = ReLU(c1)
            p1      = MaxPoolingLayer {(2:2), stride=(2:2)}(r1)
            unpool1 = MaxUnpooling(p1, r1, (2:2:1), stride=(2:2:1), autoPadding=(false:false:false), lowerPad=0, upperPad=0)
            W = BS.Parameters.Parameter(16, 4, init='gaussian', initValueScale=0.1)
            deconv  = Convolution(W, unpool1, (5:5:1), stride=(2:2:1), sharing=(true:true:true), autoPadding=(false:false:false), lowerPad=(0:0:0), upperPad=(0:0:0), deconv=true)

            #c2      = ConvolutionalLayer {48, (3:3), pad = false}(p1)
            #r2      = ReLU(c2) 
            #h1      = DenseLayer {96}(r2)
            #d1      = Dropout(h1)
            #r3      = ReLU(d1)  
            #z       = LinearLayer {labelDim}(r3)
        }.deconv

        # inputs
        features = Input {imageShape}
        #labels = Input {labelDim}

        # apply model to features
        xScaled = Scale {featScale} (features)
        z = model (xScaled)

        # loss and error computation
        mse = SquareError(z, xScaled)

        # Special Nodes
        featureNodes = (features)
        criterionNodes = (mse)
   }

    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 40
        learningRatesPerSample = 0.001*10:0.0005*10:0.0001
		dropoutRate = 0.5
        momentumAsTimeConstant = 0*5:1024
        
        numMBsToShowResult = 500
    }

    reader = {
        readerType = "CNTKTextFormatReader"
        # See ../REAMDE.md for details on getting the data (Train-28x28_cntk_text.txt).
        file = "$DataDir$/Train-28x28_cntk_text.txt"
        randomize = true
        keepDataInMemory = true
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }    
}

# TEST CONFIG
testNetwork = {
    action = test
    minibatchSize = 1024    # reduce this if you run out of memory

    reader = {
        readerType = "CNTKTextFormatReader"
        file = "$DataDir$/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}
